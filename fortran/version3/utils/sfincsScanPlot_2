#!/usr/bin/env python

# This python script plots the output of a SFINCS convergence scan.

outputFilename = "sfincsOutput.h5"

import matplotlib.pyplot as plt
import h5py
import numpy
import inspect, math, os
from scipy.interpolate import interp1d
from scipy.optimize import brentq

print "This is "+ inspect.getfile(inspect.currentframe())

numRuns = 0
Ers = []
outputs = []
radialCurrents = []

def uniq(seq):
   checked = []
   for e in seq:
       if e not in checked:
           checked.append(e)
   return checked

# Get a list of the subdirectories:                                                                        
directories = filter(os.path.isdir, os.listdir("."))

atLeastOneDirectorySucceeded = False

for directory in directories:
    filename = directory+"/"+outputFilename
    if not os.path.isfile(filename):
        print "Directory "+directory+" does not have a "+outputFilename+" file (yet)."
        continue

    try:
        f = h5py.File(filename,'r')
    except IOError:
        print "Unable to open "+filename+" even though this file exists."
        continue

    try:
        # Try reading a field that should definitely be present in the output file for any run that completed.
        dummy = f["FSABFlow"][()]
    except:
        print "Unable to read "+filename+" even though this file exists."
        continue

    try:
        finished = f["finished"]
    except KeyError:
        print "Run in directory "+directory+" does not appear to have finished."
        continue

    print "Processing directory "+directory

    # The expression [()] converts from an h5py dataset to a numpy ndarray:
    integerToRepresentTrue = (f["integerToRepresentTrue"][()])
    inputRadialCoordinateForGradients_new = f["inputRadialCoordinateForGradients"][()]
    RHSMode_new = f["RHSMode"][()]
    Nspecies_new = f["Nspecies"][()]
    Zs = f["Zs"][()]
    includePhi1_new = (f["includePhi1"][()] == integerToRepresentTrue)
    if numRuns == 0:
       inputRadialCoordinateForGradients = inputRadialCoordinateForGradients_new
       RHSMode = RHSMode_new
       Nspecies = Nspecies_new
       includePhi1 = includePhi1_new
    else:
       if inputRadialCoordinateForGradients != inputRadialCoordinateForGradients_new:
          print "Error! inputRadialCoordinateForGradients is not consistent among runs."
          exit(1)
       if RHSMode != RHSMode_new:
          print "Error! RHSMode is not consistent among runs."
          exit(1)
       if Nspecies != Nspecies_new:
          print "Error! Nspecies is not consistent among runs."
          exit(1)
       if includePhi1 != includePhi1_new:
          print "Error! includePhi1 is not consistent among runs."
          exit(1)

    if inputRadialCoordinateForGradients==0:
       varName = "dPhiHatdpsiHat"
    elif inputRadialCoordinateForGradients==1:
       varName = "dPhiHatdpsiN"
    elif inputRadialCoordinateForGradients==2:
       varName = "dPhiHatdrHat"
    elif inputRadialCoordinateForGradients==3:
       varName = "dPhiHatdrN"
    else:
       print "Error! Invalid inputRadialCoordinateForGradients."
       exit(1)

    if RHSMode != 1 and RHSMode != 2 and RHSMode != 3:
        print "Error! sfincsScanPlot is not yet set up for RHSMode = "+str(RHSMode)
        exit(1)

    doAmbipolaritySolve = (RHSMode==1)

    Ers.append(f[varName][()])
    FSABFlow = f["FSABFlow"][()]
    FSABjHat = f["FSABjHat"][()]
    particleFlux_vm = f["particleFlux_vm_psiHat"][()]
    heatFlux_vm = f["heatFlux_vm_psiHat"][()]
    elapsedTime = f["elapsed time (s)"][()]
    atLeastOneDirectorySucceeded = True
    if RHSMode>1:
       transportMatrix = f["transportMatrix"][()]
    if includePhi1:
        particleFlux_vd = f["particleFlux_vd_psiHat"][()]
        heatFlux_vd = f["heatFlux_vd_psiHat"][()]

    if RHSMode > 1:
       results = []
       for icol in range(transportMatrix.shape[1]):
          for irow in range(transportMatrix.shape[0]):
             results.append(transportMatrix[irow,icol])
       outputs.append(results)
    else:
       # RHSMode = 1
       if Nspecies==1:
          if includePhi1:
             radialCurrents.append(Zs[0]*particleFlux_vd[0,-1])
             outputs.append([FSABFlow[0,0],particleFlux_vm[0,0],particleFlux_vd[0,0],heatFlux_vm[0,0],heatFlux_vd[0,0]])
          else:
             radialCurrents.append(Zs[0]*particleFlux_vm[0,-1])
             outputs.append([FSABFlow[0,0],particleFlux_vm[0,0],heatFlux_vm[0,0]])
             #outputs.append([FSABFlow[0,0],particleFlux_vm[0,0],heatFlux_vm[0,0],elapsedTime])
       else:
          results = []
          iteration = -1
          for ispecies in range(Nspecies):
             if includePhi1:
                results.append(FSABFlow[ispecies,iteration])
                results.append(particleFlux_vm[ispecies,iteration])
                results.append(particleFlux_vd[ispecies,iteration])
                results.append(heatFlux_vm[ispecies,iteration])
                results.append(heatFlux_vd[ispecies,iteration])
             else:
                results.append(FSABFlow[ispecies,iteration])
                results.append(particleFlux_vm[ispecies,iteration])
                results.append(heatFlux_vm[ispecies,iteration])
          results.append(FSABjHat[iteration])
          if includePhi1:
             radialCurrents.append(sum(Zs*particleFlux_vd[:,-1]))
          else:
             radialCurrents.append(sum(Zs*particleFlux_vm[:,-1]))
          results.append(radialCurrents[-1])
          outputs.append(results)

    numRuns += 1

    print "Successfully read run in directory "+directory

if not atLeastOneDirectorySucceeded:
   print "Error! There do not seem to be any completed sfincs jobs in subdirectories of this directory."
   exit(1)

conversionFactorToddpsiHat = f['dPhiHatdpsiHat'][()] / f[varName][()]
conversionFactorToddpsiN   = f['dPhiHatdpsiN'][()]   / f[varName][()]
conversionFactorToddrHat   = f['dPhiHatdrHat'][()]   / f[varName][()]
conversionFactorToddrN     = f['dPhiHatdrN'][()]     / f[varName][()]


# Sort by Er:
Ers_sorted = sorted(Ers)
outputs_sorted = []
radialCurrents_sorted = []
for Er in Ers_sorted:
   outputs_sorted.append(outputs[Ers.index(Er)])
   radialCurrents_sorted.append(radialCurrents[Ers.index(Er)])
 
outputs_array = numpy.array(outputs_sorted)

radialCurrentLabel = "radial current"

if RHSMode > 1:
   yAxisLabels=[]
   numQuantities = transportMatrix.shape[0]*transportMatrix.shape[1]
   for irow in range(transportMatrix.shape[0]):
      for icol in range(transportMatrix.shape[1]):
         yAxisLabels.append("L"+str(irow+1)+str(icol+1))
else:
   if Nspecies==1:
      if includePhi1:
         numQuantities = 5
         yAxisLabels=["FSABFlow","particleFlux\nvm_psiHat","particleFlux\nvd_psiHat","heatFlux\nvm_psiHat","heatFlux\nvd_psiHat"]
      else:
         numQuantities = 3
         yAxisLabels=["FSABFlow","particleFlux\nvm_psiHat","heatFlux\nvm_psiHat","elapsed time (s)"]
   else:
      if includePhi1:
         numQuantities = Nspecies*5+2
         yAxisLabels=[]
         for i in range(1,Nspecies+1):
            yAxisLabels.append("FSABFlow (species "+str(i)+")")
            yAxisLabels.append("particleFlux vm_psiHat (species "+str(i)+")")
            yAxisLabels.append("particleFlux vd_psiHat (species "+str(i)+")")
            yAxisLabels.append("heatFlux vm_psiHat (species "+str(i)+")")
            yAxisLabels.append("heatFlux vd_psiHat (species "+str(i)+")")
         yAxisLabels.append("FSABjHat")
         yAxisLabels.append(radialCurrentLabel)
        
      else:
         numQuantities = Nspecies*3+2
         yAxisLabels=[]
         for i in range(1,Nspecies+1):
            yAxisLabels.append("FSABFlow (species "+str(i)+")")
            yAxisLabels.append("particleFlux_vm_psiHat (species "+str(i)+")")
            yAxisLabels.append("heatFlux_vm_psiHat (species "+str(i)+")")
         yAxisLabels.append("FSABjHat")
         yAxisLabels.append(radialCurrentLabel)
            


# ***************************************************
# Solve for the ambipolar E_r
# ***************************************************

ambipolaritySolveSucceeded = False
if doAmbipolaritySolve:
   if max(radialCurrents)>0 and min(radialCurrents)<0:
      # We have runs that straddle j_psi = 0, so we can find at least 1 ambipolar solution.
      print "Solving for E_r."
      interpolator = interp1d(Ers_sorted, radialCurrents_sorted, kind='cubic',  bounds_error=False)
      # In the next line, 100 is arbitrary, and could be replaced by another large integer.
      Er_fine = numpy.linspace(min(Ers), max(Ers), num=100)
      radialCurrent_fine = interpolator(Er_fine)
      # Approximately find points where the sign of radial current flips:
      positiveCurrent = (radialCurrent_fine>0)
      signFlips = (positiveCurrent[:-1] != positiveCurrent[1:])
      numRoots = sum(1 for x in signFlips if x)
      print "Number of roots found for E_r: ",numRoots
      roots = []
      #for i in range(numRoots):
      for index,value in enumerate(signFlips):
         if value:
            roots.append(brentq(interpolator,Er_fine[index],Er_fine[index+1]))
      # Convert standard array to numpy array:
      roots = numpy.array(roots)
      print "Roots found for the radial derivative of the electrostatic potential, for various radial coordinates:"
      print "d PhiHat / d psiHat = ",roots * conversionFactorToddpsiHat
      print "d PhiHat / d psiN   = ",roots * conversionFactorToddpsiN
      print "d PhiHat / d rHat   = ",roots * conversionFactorToddrHat
      print "d PhiHat / d rN     = ",roots * conversionFactorToddrN

      # Interpolate the other results onto the ambipolar Er(s):
      print "**** Output quantities at these ambipolar E_r value(s) ****"
      outputs_ambipolar = []
      for iQuantity in range(numQuantities):
         quantityInterpolator = interp1d(Ers_sorted, outputs_array[:,iQuantity], kind='cubic',  bounds_error=False)
         thisOutput_ambipolar = quantityInterpolator(roots)
         outputs_ambipolar.append(thisOutput_ambipolar)
         print yAxisLabels[iQuantity],": ",thisOutput_ambipolar

      ambipolaritySolveSucceeded = True
   else:
      print "All runs have the same sign of radial current, so we cannot solve for the ambipolar E_r."
else:
   print "Not doing an ambipolarity solve since RHSMode > 1."

# ***************************************************
# Now make the plot
# ***************************************************

fig = plt.figure()
fig.patch.set_facecolor('white')

numCols = math.ceil(math.sqrt(numQuantities*1.0))
numRows = math.ceil(numQuantities*1.0/numCols)

for iQuantity in range(numQuantities):
   plt.subplot(numRows,numCols,iQuantity+1)
   plt.plot(Ers_sorted,outputs_array[:,iQuantity],'.-')
   if ambipolaritySolveSucceeded:
      for i in range(len(roots)):
         plt.plot(roots[i],outputs_ambipolar[iQuantity][i],'xr')
   plt.xlabel(varName)
   plt.ylabel(yAxisLabels[iQuantity])
   if yAxisLabels[iQuantity]==radialCurrentLabel:
      plt.plot([min(Ers),max(Ers)],[0,0],':k')
      if ambipolaritySolveSucceeded:
         plt.plot(Er_fine,radialCurrent_fine,'-g')   

titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
ax = fig.add_axes([0,0,1,1], frameon=False)
ax.text(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

plt.show()

