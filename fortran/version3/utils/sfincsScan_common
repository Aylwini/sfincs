#!/usr/bin/env python

# This python file contains several subroutines that are used both in launching and processing parameter scans in sfincs.

# Code preceding instructions for sfincsScan in the input.namelist file:
commentCode = "!ss"

import string

def readScanVariable(varName, intOrFloatOrString):
    # This subroutine reads the special scan commands in the input.namelist that are hidden from fortran:
    # It is assumed that the input.namelist file has been loaded into the variable "inputFile".

    if (intOrFloatOrString != "int") and (intOrFloatOrString != "float") and (intOrFloatOrString != "string"):
        print "intOrFloatOrString but be int, float, or string."
        exit(1)

    originalVarName = varName
    varName = varName.lower()
    returnValue = None
    numValidLines = 0
    for line in inputFile:
        line2 = line.strip().lower()
        # We need enough characters for the comment code, varName, =, and value: 
        if len(line2)<len(commentCode)+3:
            continue

        if not line2[:len(commentCode)]==commentCode:
            continue

        line3 = line2[len(commentCode):].strip()

        if len(line3) < len(varName)+2:
            continue

        if not line3[:len(varName)]==varName:
            continue

        line4 = line3[len(varName):].strip()

        if not line4[0] =="=":
            continue

        line5 = line4[1:].strip();
        if intOrFloatOrString != "string":
            # python does not recognize fortran's 1d+0 scientific notation
            line5 = line5.replace('d','e').replace('D','e')
        
        # Remove any comments:
        if "!" in line5:
            line5 = line5[:string.find(line5,"!")]
        line5 = line5.strip();

        if intOrFloatOrString=="int":
            try:
                returnValue = int(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+originalVarName+" in "+filename+" but I was unable to parse the line to get an integer."
                print "Here is the line in question:"
                print line
        elif intOrFloatOrString=="float":
            try:
                returnValue = float(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+originalVarName+" in "+filename+" but I was unable to parse the line to get a float."
                print "Here is the line in question:"
                print line
        elif intOrFloatOrString=="string":
            returnValue = line5
            numValidLines += 1

    if returnValue==None:
        print "Error! Unable to find a valid setting for the scan variable "+originalVarName+" in "+filename+"."
        print "A definition should have the following form:"
        if intOrFloatOrString == "int":
            print commentCode+" "+originalVarName+" = 1"
        elif intOrFloatOrString == "float":
            print commentCode+" "+originalVarName+" = 1.5"
        elif intOrFloatOrString == "string":
            print commentCode+" "+originalVarName+" = nuPrime"
        exit(1)

    if numValidLines > 1:
        print "Warning! More than 1 valid definition was found for the variable "+originalVarName+". The last one will be used."

    print "Read "+originalVarName+" = "+str(returnValue)
    return returnValue


def readVariable(varName, intOrFloatOrString):
    # This function reads normal fortran variables from the input.namelist file.
    # It is assumed that the input.namelist file has been loaded into the variable "inputFile".

    if (intOrFloatOrString != "int") and (intOrFloatOrString != "float") and (intOrFloatOrString != "string"):
        print "intOrFloatOrString but be int, float, or string."
        exit(1)

    originalVarName = varName
    varName = varName.lower()
    returnValue = None
    numValidLines = 0
    for line in inputFile:
        line3 = line.strip().lower()
        if len(line3)<1:
            continue

        if line3[0]=="!":
            continue

        if len(line3) < len(varName)+2:
            continue

        if not line3[:len(varName)]==varName:
            continue

        line4 = line3[len(varName):].strip()

        if not line4[0] =="=":
            continue

        line5 = line4[1:].strip();
        if intOrFloatOrString != "string":
            # python does not recognize fortran's 1d+0 scientific notation
            line5 = line5.replace('d','e').replace('D','e')

        # Remove any comments:
        if "!" in line5:
            line5 = line5[:string.find(line5,"!")]

        if intOrFloatOrString=="int":
            try:
                returnValue = int(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+originalVarName+" in "+filename+" but I was unable to parse the line to get an integer."
                print "Here is the line in question:"
                print line
        elif intOrFloatOrString=="float":
            try:
                returnValue = float(line5)
                numValidLines += 1
            except:
                print "Warning! I found a definition for the variable "+originalVarName+" in "+filename+" but I was unable to parse the line to get a float."
                print "Here is the line in question:"
                print line
        elif intOrFloatOrString=="string":
            returnValue = line5
            numValidLines += 1

    if returnValue==None:
        print "Error! Unable to find a valid setting for the variable "+originalVarName+" in "+filename+"."
        exit(1)

    if numValidLines > 1:
        print "Warning! More than 1 valid definition was found for the variable "+originalVarName+". The last one will be used."

    print "Read "+originalVarName+" = "+str(returnValue)
    return returnValue
