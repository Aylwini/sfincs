#!/usr/bin/env python

# This script will not work if called directly.
# From the command line, you should call sfincsScan instead.

import os, inspect

print "This is "+ inspect.getfile(inspect.currentframe())
print "Beginning a convergence scan."

#####################################################################################################################3

NFourier = readVariable("NFourier","int",required=False)

if NFourier != None:
    baseValuePresent = True
else:
    # Default:
    NFourier = 10
    baseValuePresent = False

NFourierMaxFactor = readScanVariable("NFourierMaxFactor","float",required=False)
NFourierMinFactor = readScanVariable("NFourierMinFactor","float",required=False)
NFourierNumRuns = readScanVariable("NFourierNumRuns","int",required=False)

if NFourierMaxFactor != None and NFourierMinFactor != None and NFourierNumRuns != None:
    scanPresent = True
else:
    NFourierMaxFactor = 1
    NFourierMinFactor = 1
    NFourierNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning NFourier, you must set the base value for NFourier."
    exit(1)

if NFourier<0:
    print "Error! NFourier must be positive"
    exit(1)
if NFourierMaxFactor<0:
    print "Error! NFourierMaxFactor must be positive"
    exit(1)
if NFourierMinFactor<0:
    print "Error! NFourierMinFactor must be positive"
    exit(1)
NFouriers = logspace_int(NFourierMinFactor*NFourier,NFourierMaxFactor*NFourier,NFourierNumRuns)
try:
    NFouriers.remove(NFourier)
except ValueError:
    pass
print "NFouriers:",NFouriers

#####################################################################################################################3

mmax = readVariable("mmax","int",required=False)

if mmax != None:
    baseValuePresent = True
else:
    # Default:
    mmax = 32
    baseValuePresent = False

mmaxMaxFactor = readScanVariable("mmaxMaxFactor","float",required=False)
mmaxMinFactor = readScanVariable("mmaxMinFactor","float",required=False)
mmaxNumRuns = readScanVariable("mmaxNumRuns","int",required=False)

if mmaxMaxFactor != None and mmaxMinFactor != None and mmaxNumRuns != None:
    scanPresent = True
else:
    mmaxMaxFactor = 1
    mmaxMinFactor = 1
    mmaxNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning mmax, you must set the base value for mmax."
    exit(1)

if mmax<0:
    print "Error! mmax must be positive"
    exit(1)
if mmaxMaxFactor<0:
    print "Error! mmaxMaxFactor must be positive"
    exit(1)
if mmaxMinFactor<0:
    print "Error! mmaxMinFactor must be positive"
    exit(1)
mmaxs = logspace_int(mmaxMinFactor*mmax,mmaxMaxFactor*mmax,mmaxNumRuns)
try:
    mmaxs.remove(mmax)
except ValueError:
    pass
print "mmaxs:",mmaxs

#####################################################################################################################3

nmax = readVariable("nmax","int",required=False)

if nmax != None:
    baseValuePresent = True
else:
    # Default:
    nmax = 32
    baseValuePresent = False

nmaxMaxFactor = readScanVariable("nmaxMaxFactor","float",required=False)
nmaxMinFactor = readScanVariable("nmaxMinFactor","float",required=False)
nmaxNumRuns = readScanVariable("nmaxNumRuns","int",required=False)

if nmaxMaxFactor != None and nmaxMinFactor != None and nmaxNumRuns != None:
    scanPresent = True
else:
    nmaxMaxFactor = 1
    nmaxMinFactor = 1
    nmaxNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning nmax, you must set the base value for nmax."
    exit(1)

if nmax<0:
    print "Error! nmax must be positive"
    exit(1)
if nmaxMaxFactor<0:
    print "Error! nmaxMaxFactor must be positive"
    exit(1)
if nmaxMinFactor<0:
    print "Error! nmaxMinFactor must be positive"
    exit(1)
nmaxs = logspace_int(nmaxMinFactor*nmax,nmaxMaxFactor*nmax,nmaxNumRuns)
try:
    nmaxs.remove(nmax)
except ValueError:
    pass
print "nmaxs:",nmaxs

#####################################################################################################################3

Nxi = readVariable("Nxi","int",required=False)
if Nxi != None:
    baseValuePresent = True
else:
    # Default
    Nxi = 16
    baseValuePresent = False

NxiMaxFactor = readScanVariable("NxiMaxFactor","float",required=False)
NxiMinFactor = readScanVariable("NxiMinFactor","float",required=False)
NxiNumRuns = readScanVariable("NxiNumRuns","int",required=False)
if NxiMaxFactor != None and NxiMinFactor != None and NxiNumRuns != None:
    scanPresent = True
else:
    NxiMaxFactor = 1
    NxiMinFactor = 1
    NxiNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning Nxi you must set the base value for Nxi."
    exit(1)

if Nxi<0:
    print "Error! Nxi must be positive"
    exit(1)
if NxiMaxFactor<0:
    print "Error! NxiMaxFactor must be positive"
    exit(1)
if NxiMinFactor<0:
    print "Error! NxiMinFactor must be positive"
    exit(1)
Nxis = logspace_int(NxiMinFactor*Nxi,NxiMaxFactor*Nxi,NxiNumRuns)
try:
    Nxis.remove(Nxi)
except ValueError:
    pass
print "Nxis:",Nxis

#####################################################################################################################3

NL = readVariable("NL","int",required=False)
if NL != None:
    baseValuePresent = True
else:
    # Default
    NL = 4
    baseValuePresent = False

NLMaxFactor = readScanVariable("NLMaxFactor","float",required=False)
NLMinFactor = readScanVariable("NLMinFactor","float",required=False)
NLNumRuns = readScanVariable("NLNumRuns","int",required=False)
if NLMaxFactor != None and NLMinFactor != None and NLNumRuns != None:
    scanPresent = True
else:
    NLMaxFactor = 1
    NLMinFactor = 1
    NLNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning NL, you must set the base value for NL."
    exit(1)

if NL<0:
    print "Error! NL must be positive"
    exit(1)
if NLMaxFactor<0:
    print "Error! NLMaxFactor must be positive"
    exit(1)
if NLMinFactor<0:
    print "Error! NLMinFactor must be positive"
    exit(1)
NLs = logspace_int(NLMinFactor*NL,NLMaxFactor*NL,NLNumRuns)
try:
    NLs.remove(NL)
except ValueError:
    pass
print "NLs:",NLs

#####################################################################################################################3

Nx = readVariable("Nx","int",required=False)
if Nx != None:
    baseValuePresent = True
else:
    # Default
    Nx = 5
    baseValuePresent = False

NxMaxFactor = readScanVariable("NxMaxFactor","float",required=False)
NxMinFactor = readScanVariable("NxMinFactor","float",required=False)
NxNumRuns = readScanVariable("NxNumRuns","int",required=False)
if NxMaxFactor != None and NxMinFactor != None and NxNumRuns != None:
    scanPresent = True
else:
    NxMaxFactor = 1
    NxMinFactor = 1
    NxNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning Nx, you must set the base value for Nx."
    exit(1)

if Nx<0:
    print "Error! Nx must be positive"
    exit(1)
if NxMaxFactor<0:
    print "Error! NxMaxFactor must be positive"
    exit(1)
if NxMinFactor<0:
    print "Error! NxMinFactor must be positive"
    exit(1)
Nxs = logspace_int(NxMinFactor*Nx,NxMaxFactor*Nx,NxNumRuns)
try:
    Nxs.remove(Nx)
except ValueError:
    pass
print "Nxs:",Nxs


#####################################################################################################################3

solverTolerance = readVariable("solverTolerance","float",required=False)
if solverTolerance != None:
    baseValuePresent = True
else:
    # Default
    solverTolerance = 1e-6
    baseValuePresent = False

solverToleranceMaxFactor = readScanVariable("solverToleranceMaxFactor","float",required=False)
solverToleranceMinFactor = readScanVariable("solverToleranceMinFactor","float",required=False)
solverToleranceNumRuns = readScanVariable("solverToleranceNumRuns","int",required=False)
if solverToleranceMaxFactor != None and solverToleranceMinFactor != None and solverToleranceNumRuns != None:
    scanPresent = True
else:
    solverToleranceMaxFactor = 1
    solverToleranceMinFactor = 1
    solverToleranceNumRuns = 0
    scanPresent = False

if scanPresent and (not baseValuePresent):
    print "Error! If scanning solverTolerance, you must set the base value for solverTolerance."
    exit(1)

if solverTolerance<0:
    print "Error! solverTolerance must be positive"
    exit(1)
if solverToleranceMaxFactor<0:
    print "Error! solverToleranceMaxFactor must be positive"
    exit(1)
if solverToleranceMinFactor<0:
    print "Error! solverToleranceMinFactor must be positive"
    exit(1)
solverTolerances = logspace(solverToleranceMinFactor*solverTolerance,solverToleranceMaxFactor*solverTolerance,solverToleranceNumRuns)
for value in solverTolerances:
    if abs((math.log(value)-math.log(solverTolerance))/math.log(value)) < 1e-6:
        solverTolerances.remove(value)
print "solverTolerances:",solverTolerances

#####################################################################################################################3

numRunsInScan = 1+len(NFouriers)+len(mmaxs)+len(nmaxs)+len(Nxis)+len(NLs)+len(Nxs)+len(solverTolerances)

baseCase = [NFourier,mmax,nmax,Nxi,NL,Nx,solverTolerance]

parametersForScan = []
for i in range(numRunsInScan):
    parametersForScan.append(list(baseCase))

currentIndex = 1
descriptions = ["baseCase"]

for i in range(len(NFouriers)):
    parametersForScan[currentIndex][0] = NFouriers[i]
    descriptions.append("NFourier" + str(NFouriers[i]))
    currentIndex += 1

for i in range(len(mmaxs)):
    parametersForScan[currentIndex][0] = mmaxs[i]
    descriptions.append("mmax" + str(mmaxs[i]))
    currentIndex += 1

for i in range(len(nmaxs)):
    parametersForScan[currentIndex][0] = nmaxs[i]
    descriptions.append("nmax" + str(nmaxs[i]))
    currentIndex += 1

for i in range(len(Nxis)):
    parametersForScan[currentIndex][2] = Nxis[i]
    descriptions.append("Nxi" + str(Nxis[i]))
    currentIndex += 1

for i in range(len(NLs)):
    parametersForScan[currentIndex][3] = NLs[i]
    descriptions.append("NL" + str(NLs[i]))
    currentIndex += 1

for i in range(len(Nxs)):
    parametersForScan[currentIndex][4] = Nxs[i]
    descriptions.append("Nx" + str(Nxs[i]))
    currentIndex += 1

for i in range(len(NxPotentialsPerVths)):
    parametersForScan[currentIndex][5] = NxPotentialsPerVths[i]
    descriptions.append("NxPotentialsPerVth" + "{0:.4g}".format(NxPotentialsPerVths[i]))
    currentIndex += 1

for i in range(len(xMaxs)):
    parametersForScan[currentIndex][6] = xMaxs[i]
    descriptions.append("xMax" + "{0:.4g}".format(xMaxs[i]))
    currentIndex += 1

for i in range(len(solverTolerances)):
    parametersForScan[currentIndex][7] = solverTolerances[i]
    descriptions.append("solverTolerance" + "{0:.4g}".format(solverTolerances[i]))
    currentIndex += 1

if currentIndex != numRunsInScan:
    print "Error! Something went wrong."
    exit(1)

if len(parametersForScan) != len(descriptions):
    print "Error! Something went wrong."
    exit(1)

# See if any runs with the same description already exist.
# This happens if you re-run sfincsScan more than once in the same directory.
runNum = 0
while runNum < numRunsInScan:
    directory = descriptions[runNum]
    if os.path.exists(directory):
        print "Warning: directory "+directory+" already exists, so skipping this run."
        numRunsInScan -= 1
        descriptions.pop(runNum)
        parametersForScan.pop(runNum)
        runNum -= 1
    runNum += 1
        

print
print "Here are the parameters for the "+str(numRunsInScan)+" runs we will launch:"
print "[NFourier, mmax, nmax, Nxi, NL, Nx, solverTolerance]"
print "-----------------------------------------------------------------------"
for line in parametersForScan:
    print line

print
print "Here are the directories that will be created:"
print descriptions

if waitBeforeSubmitting:
    while True:
        proceed=raw_input("Should I go ahead and launch these "+str(numRunsInScan)+" jobs? [y/n] ")
        if proceed=="y" or proceed=="n":
            break
        print "You must enter either y or n."

    if proceed=="n":
        exit(0)

print "launching jobs..."

# Read in the job.sfincsScan file:
with open(jobFilename, 'r') as f:
    jobFile = f.readlines()

for runNum in range(numRunsInScan):
    directory = descriptions[runNum]
    print "Beginning to handle job "+str(runNum+1)+" of "+str(numRunsInScan)+": "+directory

    # To be extra safe, check again to see if the directory exists.
    if os.path.exists(directory):
        print "Warning: directory "+directory+" already exists."
        i = -1
        while True:
            i += 1
            directory2 = directory+"_"+str(i)
            if not os.path.exists(directory2):
                break
        directory = directory2
    os.makedirs(directory)
    os.chdir(directory)

    # Copy the job.sfincsScan file:
    thisJobFile = list(jobFile)
    # This next function is defined separately for each system in sfincsScan
    nameJobFile(thisJobFile,directory)
    f = open(jobFilename,"w")
    f.writelines(thisJobFile)
    f.close()

    # Now copy the input.namelist file:
    f = open(filename,"w")
    for line in inputFile:
        if namelistLineContains(line,"NFourier"):
            line = "  NFourier = "+str(parametersForScan[runNum][0])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"mmax"):
            line = "  mmax = "+str(parametersForScan[runNum][1])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"nmax"):
            line = "  nmax = "+str(parametersForScan[runNum][2])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"Nxi"):
            line = "  Nxi = "+str(parametersForScan[runNum][3])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"NL"):
            line = "  NL = "+str(parametersForScan[runNum][4])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"Nx"):
            line = "  Nx = "+str(parametersForScan[runNum][5])+" ! Set by sfincsScan_1.\n"
        if namelistLineContains(line,"solverTolerance"):
            line = "  solverTolerance = "+str(parametersForScan[runNum][6])+" ! Set by sfincsScan_1.\n"
        f.write(line)
    f.close()

    # Submit the sfincs job:
    try:
        # We need to include .split(" ") to separate the command-line arguments into an array of strings.   
        # I'm not sure why python requires this. 
        submissionResult = subprocess.call(submitCommand.split(" "))
    except:
        print "ERROR! Unable to submit run "+directory+" for some reason."
        raise
    else:
        if submissionResult==0:
            print "No errors submitting job "+directory
        else:
            print "Nonzero exit code returned when trying to submit job "+directory

    os.chdir("..")
