! SFINCS:
! The Stellarator Fokker-Planck Iterative Neoclassical Conservative Solver.
! Single species version.
! Original version written in 2013 by Matt Landreman
! Massachusetts Institute of Technology
! Plasma Science & Fusion Center
!   
! Dimensional quantities in this program are normalized to "reference" values:
! \bar{B} = reference magnetic field, typically 1 Tesla.
! \bar{R} = reference length, typically 1 meter.
! \bar{n} = reference density, typically 10^19 m^{-3}, 10^20 m^{-3}, or something similar.
! \bar{m} = reference mass, typically either the mass of hydrogen or deuterium.
! \bar{T} = reference temperature in energy units, typically 1 eV or 1 keV.
! \bar{v} = \sqrt{2 * \bar{T} / \bar{m}} = reference speed
! \bar{Phi} = reference electrostatic potential, typically 1 V or 1 kV.
!
! You can choose any reference parameters you like, not just the values
! suggested here. The code "knows" about the reference values only through
! the 3 combinations Delta, omega, and nuN or nuPrime, input below.
!
! Radial gradients of density, temperature, and electrostatic potential are
! specified as derivatives with respect to psi_N, where psi_N is the 
! toroidal flux normalized to the value at the last closed flux surface. 
! (psi_N=0 is the magnetic axis, and psi_N=1 is the last closed flux 
! surface.)

&flowControl
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Options for program flow control:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  programMode = 1
  ! Options for 'programMode':
  ! 1 = Solve for a single set of numerical parameters.
  ! 2 = Scan the numerical parameters to test for convergence, keeping the physics parameters fixed.
  ! 6 = Scan EStar

  ! If you make the sign of programMode negative, the program will print the number of runs required
  ! for the scan corresponding to abs(programMode) and then exit without actually carrying out any solves.

  RHSMode = 1
  ! Options for RHSMode:
  ! 1 = Solve for a single right-hand side.
  ! 2 = Solve for three right-hand sides to get the full 3x3 transport matrix.

  outputFilename = "sfincsOutput.h5"

  outputScheme = 1
  ! Options for outputScheme:
  ! 0 = Do not save any HDF5 file.
  ! 1 = Do save an HDF5 file.

  ! If the following switch is set to true, a Matlab m-file is created which
  ! stores the matrix, right-hand side, and solution vector.  If an iterative solver is used,
  ! the preconditioner matrix is also saved.
  ! PETSc usually generates an error message if the size of the linear system is more then 1400 x 1400,
  ! so usually this setting should be false.
!  saveMatlabOutput = .true.
  saveMatlabOutput = .false.

  MatlabOutputFilename = "sfincsOutput.m"

  parallelizeOverScan = .true.
!  parallelizeOverScan = .false.

  ! If the parameter below is false, the linear system will not actually be solved.
  ! Sometimes it is useful to run the code without solving the system in order to quickly
  ! output profiles or for debugging.
  solveSystem = .true.
!  solveSystem = .false.
/

&geometryParameters

  geometryScheme = 1
  ! 1 = Three-helicity model
  ! 2 = Three-helicity approximation of the LHD standard configuration
  ! 3 = Four-helicity approximation of the LHD inward-shifted configuration
  ! 4 = Three-helicity approximation of the W7-X standard configuration
  ! 10= Read the boozer coordinate data from the file specified as "fort996boozer_file" below
  ! 11= Read the boozer coordinate data from the file specified as "JGboozer_file" below (stellarator symmetric file)
  ! 12= Read the boozer coordinate data from the file specified as "JGboozer_file" below (non-stellarator symmetric file)
 

  ! The next few options only matter for geometryScheme = 1, in which the magnetic field is taken to have the form
  ! B = BBar * B0OverBBar * [1 + epsilon_t * cos(theta) + epsilon_h * cos(helicity_l * theta - helicity_n * zeta)]
  !                            + epsilon_antisymm * sin(helicity_antisymm_l * theta - helicity_antisymm_n * zeta)]

  B0OverBBar = 1.0d+0

  GHat = 3.7481d+0
  ! G is c/2 * the poloidal current outside the flux
  ! surface. Equivalently, G is the coefficient of grad zeta in the
  ! covariant representation of vector B. GHat is G normalized by \bar{B}\bar{R}.

  IHat = 0d+0
  ! I is c/2 * the toroidal current inside the flux
  ! surface. Equivalently, I is the coefficient of grad theta in the
  ! covariant representation of vector B. IHat is I normalized by \bar{B}\bar{R}.

  iota = 0.4542d+0
  ! iota is the rotational transform = 1 / (safety factor q)

  epsilon_t = 0.13d+0 !-0.07053d+0

  epsilon_h = 0.12d+0 !0.05067d+0
  
  helicity_l = 1
  helicity_n = 0

  epsilon_antisymm = 0.0d+0
  helicity_antisymm_l = 3	
  helicity_antisymm_n = 0

  ! End of options that only matter for geometryScheme = 1.

  ! The following option only matters for geometryScheme = 10:

  fort996boozer_file = "TJII-midradius_example_s_0493_fort.996"
  ! Note that PsiA is not stored in the fort.996 file, so we use the
  ! PsiAHat value from the "physics parameters" namelist below.

  ! The remaining options only matter for geometryScheme = 11 and 12:

  JGboozer_file = "../../equilibria/w7x-sc1.bc"                     ! stellarator symmetric example, geometryScheme = 11
  JGboozer_file_NonStelSym = "../../equilibria/out_neo-2_2_axisym"  ! non-stellarator symmetric example, geometryScheme = 12, requires Nzeta=1

  normradius_wish = 0.5d+0
  !The calculation will be performed for the radius
  !closest to this one in the JGboozer_file(_NonStelSym)

  min_Bmn_to_load = 1d-4
  !Filter out any Bmn components smaller than this.

/

&physicsParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Physics parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  ! The speciesMode parameter doesn't do anything yet.
  speciesMode = 0
  ! 0 = ions
  ! 1 = electrons

  ! Roughly speaking, Delta is rho_* at the reference parameters.
  ! More precisely, 
  ! Delta = c * \bar{m} * \bar{v} / (e * \bar{B} * \bar{R}) in Gaussian units,
  ! Delta =     \bar{m} * \bar{v} / (e * \bar{B} * \bar{R}) in SI units,
  ! where
  ! c = speed of light
  ! e = proton charge
  ! Delta = 0.0011d+0
  
  Delta = 4.5694d-3 
  ! reference values: \bar{T}=1 keV, \bar{n}=10^20 m^-3,
  ! \bar{Phi}=1 kV, \bar{B}=1 T, \bar{R}=1 m, proton mass


  ! omega = 0.0014d+0
  
  omega = 2.2847d-3 
  ! reference values: \bar{T}=1 keV, \bar{n}=10^20 m^-3,
  ! \bar{Phi}=1 kV, \bar{B}=1 T, \bar{R}=1 m, proton mass


  ! psiAHat = psi_a / (\bar{B} * \bar{R}^2) (in both Gaussian and SI units)
  ! where 2*pi*psi_a is the toroidal flux at the last closed flux surface
  ! (the surface where psi_N = 1.)
  ! The value of psiAHat here is over-written for geometryScheme = 2, 3, 4, 11 and 12.
  psiAHat = 0.03d+0

  THat = 0.05d+0

  nHat = 1.0d+0

  ! The following three quantities matter for RHSMode=1 but not for RHSMode=2:
  dTHatdpsi = -0.7d+0
  dnHatdpsi = -0.5d+0
  EHat = 0 ! Parallel inductive electric field
  ! EHat = <E dot B> * \bar{R} / (\bar{Phi} * \bar{B})  (in both Gaussian and SI units)
  ! where
  ! E = electric field vector
  ! B = magnetic field vector
  ! < ... > denotes a flux surface average.

  dPhiHatdpsi = 0
  EStar = 0
  ! Radial electric field.
  ! There are 2 different ways to specify the radial electric field: dPhiHatdpsi and EStar.
  ! If RHSMode == 1, dPhiHatdpsi is used and EStar is ignored.
  ! If RHSMode == 2, EStar is used and dPhiHatdpsi is ignored.

  ! Range of EStar for a scan (programMode = 6)
  EStarMin = 0.01
  EStarMax = 0.1
  NEStar = 3

  !nuN = 0.2681d+0
  !nuPrime = 4.9085d+0

  nuN = 0.75824d+0
  nuPrime = 5.45932d+0 
  ! There are 2 different ways to specify the collisionality: nuN and nuPrime.
  ! If RHSMode == 1, nuN is used and nuPrime is ignored.
  ! If RHSMode == 2, nuPrime is used and nuN is ignored.
  ! 
  ! nuN = nu_ii * \bar{R} / \bar{v}
  ! and
  ! nuPrime = nu_ii * (G + iota * I) / (v_i * B_0)
  !         = BBarOverB0 / sqrt(THat) * (GHat + iota * IHat) * nuN
  !
  ! where
  ! v_i = sqrt(2 * T_i / m_i) and
  !
  !                  4 * sqrt{2*pi} * n_i * Z^4 * e^4 * ln(Lambda)
  ! nu_ii = -----------------------------------------------------------   (SI units)
  !             3 * (4 * pi * epsilon_0)^2 * sqrt(m_i} * T_i^(3/2)
  !
  ! or, equivalently,
  !
  !                  4 * sqrt{2*pi} * n_i * Z^4 * e^4 * ln(Lambda)
  ! nu_ii = -----------------------------------------------------------   (Gaussian units)
  !                       3 * sqrt(m_i} * T_i^(3/2)
  !
  ! The definition of nuPrime is motivated by the fact that the
  ! transport matrix elements depend on the density and temperature
  ! only through nuPrime, not individually. Hence, nuPrime is used as
  ! the measure of collisionality when RHSMode=2. However, 
  ! the code originally used the different collisionality
  ! definition nuN. Hence, for historical reasons, nuN is used instead of nuPrime when RHSMode=1.
  !
  ! Notice that collisionality is defined differently in the multi-species code!

  collisionOperator = 0
  ! 0 = Full linearized Fokker-Planck operator
  ! 1 = pitch-angle scattering with no momentum-conserving term
  ! 2 = pitch-angle scattering with a model momentum conserving term

  constraintScheme = -1
  ! -1 = automatic: if collisionOperator==0 then set constraintScheme=1, 
  !                 otherwise set constraintScheme=2.
  !  0 = no constraints
  !  1 = 2 constraints: <n1>=0 and <p1>=0
  !  2 = Nx constraints: <f(L=0)>=0 at each x
  ! You should probably set constraintScheme to -1 except in rare circumstances.

  ! To use one of the 4 most common trajectory models, the remaining parameters
  ! in this namelist should be set as follows:
  !
  ! Full trajectories:
  !   includeXDotTerm = .true.
  !   includeElectricFieldTermInXiDot = .true.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .false.
  !
  ! Partial trajectories: (non-conservative, as defined in the paper.)
  !   includeXDotTerm =	.false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .false.
  !
  ! Conservative partial trajectories: (Not discussed in the paper.)
  !   includeXDotTerm =	.false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .false.
  !   include_fDivVE_term = .true.
  !
  ! DKES trajectories:
  !   includeXDotTerm =	.false.
  !   includeElectricFieldTermInXiDot = .false.
  !   useDKESExBDrift = .true.
  !   include_fDivVE_term = .false.


  includeXDotTerm = .true.
!  includeXDotTerm = .false.

  includeElectricFieldTermInXiDot = .true.
!  includeElectricFieldTermInXiDot = .false.

!  useDKESExBDrift = .true.
  useDKESExBDrift = .false.
  ! If useDKESExBDrift=true, the ExB drift term in the df/dtheta and df/dzeta terms is taken
  ! to be E x B / <B^2> instead of E x B / B^2.

  !include_fDivVE_term = .true.
  include_fDivVE_term = .false.
  ! If true, a term f_1 div (v_E) is included in the kinetic equation.
  ! This term may make sense to include with the partial trajectory model
  ! as it restores Liouville's theorem (particle conservation) and eliminates 
  ! the need for either a particle or heat source.
/

&resolutionParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Numerical resolution parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  ! For each set of 4 numbers below, the first is the value used in a single run.
  ! The second and third numbers set the range by which the first number is scaled
  ! in a convergence scan. The fourth number sets the number of values tried in a
  ! convergence scan. The code attempts to space the values evenly in a logarithmic
  ! sense, as in Matlab's 'logspace' function. For example, the following settings
  ! Ntheta = 6
  ! NthetaMinFactor = 0.5
  ! NthetaMaxFactor = 2.0
  ! NthetaNumRuns = 3
  ! would mean the values Ntheta = 3, 6, and 12 would be tried in a scan.
  ! If you don't want to scan a variable in a convergence scan, set the associated
  ! xxxNumRuns parameter to 0.
  
  ! Number of grid points in the poloidal direction.
  ! Memory and time requirements DO depend strongly on this parameter.
  Ntheta = 19
  NthetaMinFactor = 1
  NthetaMaxFactor = 2.5
  NthetaNumRuns = 3

  ! Number of grid points in the toroidal direction
  ! (per identical segment of the stellarator.)
  ! Memory and time requirements DO depend strongly on this parameter.
  Nzeta = 1
  NzetaMinFactor = 1
  NzetaMaxFactor = 1.3
  NzetaNumRuns = 0

  ! Number of Legendre polynomials used to represent the distribution function.
  ! Memory and time requirements DO depend strongly on this parameter.
  ! The value of this parameter required for convergence depends strongly on
  ! the collisionality. At high collisionality, this parameter can be as low
  ! as ~ 5. At low collisionality, this parameter may need to be many 10s or
  ! even > 100 for convergence.
  Nxi = 17
  NxiMinFactor = 0.5
  NxiMaxFactor = 2.2
  NxiNumRuns = 3
  
  ! Number of Legendre polynomials used to represent the Rosenbluth
  ! potentials. Except in exceptional circumstances, this number should be 4.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  NL = 4
  NLMinFactor = 0.5
  NLMaxFactor = 2
  NLNumRuns = 0
  
  ! Number of grid points in energy used to represent the distribution function.
  ! Memory and time requirements DO depend strongly on this parameter.
  ! This parameter almost always needs to be at least 5.
  ! Usually a value in the range 5-8 is plenty for convergence, though sometimes
  ! you may need to go up to 10-15.
  Nx = 15
  NxMinFactor = 0.6
  NxMaxFactor = 2
  NxNumRuns = 3

  ! Number of grid points in energy used to represent the Rosenbluth potentials.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  NxPotentialsPerVth = 40 
  NxPotentialsPerVthMinFactor = 0.5
  NxPotentialsPerVthMaxFactor = 2
  NxPotentialsPerVthNumRuns = 0
  
  ! Maximum normalized speed for the Rosenbluth potential grid.
  ! Memory and time requirements do NOT depend strongly on this parameter.
  ! Typically a value of 5 is good.
  xMax = 5.0d+0
  xMaxMinFactor = 1
  xMaxMaxFactor = 2
  xMaxNumRuns = 0

  ! Tolerance used to define convergence of the Krylov solver.
  ! This parameter does not affect memory requirements but it does affect the
  ! time required for solution somewhat
  solverTolerance = 1d-6
  solverToleranceMinFactor = 1d-1
  solverToleranceMaxFactor = 1
  solverToleranceNumRuns = 2

  forceOddNtheta = .true.
  ! If forceOddNtheta is set to true, 1 is added to Ntheta any time a run is attempted with even Ntheta.
  ! This can be useful because the iterative solvers sometimes do not work with even Ntheta.
/

&otherNumericalParameters
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Other numerical parameters:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 
  thetaDerivativeScheme = 2
  ! Options for thetaDerivativeScheme:
  ! 0 = Spectral collocation
  ! 1 = 2nd order finite differences (3-point stencil)
  ! 2 = 4th order finite differences (5-point stencil)
  ! You should set this parameter to 2 except in rare circumstances.

  ! If 'useIterativeSolver' is set to false, a sparse direct solver
  ! will be used. The direct solver is faster for small problems and always yields a solution.
  ! For large problems, the iterative solver will usually be faster and will use much
  ! less memory, but it may not always converge.

  useIterativeSolver = .true.
!  useIterativeSolver = .false.

  whichParallelSolverToFactorPreconditioner = 2
  ! Options for whichParallelSolverToFactorPreconditioner:
  ! 1 = use mumps if it is detected, otherwise use superlu_dist
  ! 2 = force use of superlu_dist, if it is available
  !
  ! The value of whichParallelSolverToFactorPreconditioner is only used when morpheus is run with 
  ! more MPI processors than runs desired (1 if a single run, or more if a convergence scan.)
  ! Otherwise, matrices are not distributed across processors, so the PETSc built-in serial sparse
  ! direct solver is used to factor the preconditioner.

  PETSCPreallocationStrategy = 1
  ! This setting changes the estimated number of nonzeros (nnz) used for allocating memory for the matrix and preconditioner.
  ! 0 = Old method with high estimated nnz. This method works consistently but uses WAY more memory than necessary.
  ! 1 = New method with lower, more precise estimated nnz.  This method has been less thoroughly tested, but it should use much less memory.
/

&preconditionerOptions
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! Settings for how to simplify the linear system
  ! to obtain the preconditioner:
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  preconditioner_x = 1
  ! 0 = keep full x coupling
  ! 1 = drop everything off-diagonal in x
  ! 2 = keep only upper-triangular part in x
  ! 3 = keep only the tridiagonal terms in x
  ! 4 = keep only the diagonal and superdiagonal in x
  ! This parameter should almost always be 1.

  preconditioner_x_min_L = 2
  ! The x structure of the matrix will only be simplified for L >= this value.
  ! Set preconditioner_x_min_L=0 to simplify the matrix for every L.
  ! Usually, good values for this parameter are 0, 1, or 2.

  preconditioner_theta = 0
  ! 0 = keep full theta coupling
  ! 1 = use a 3-point finite difference stencil for d/dtheta

  preconditioner_zeta = 0
  ! 0 = keep full zeta coupling
  ! 1 = use a 3-point finite difference stencil for d/dzeta

  preconditioner_xi = 0
  ! 0 = keep full xi coupling
  ! 1 = drop terms that are +/- 2 from the diagonal in xi, 
  !     so preconditioner is tridiagonal in xi
  ! Either 0 or 1 may be appropriate for this parameter.

/
