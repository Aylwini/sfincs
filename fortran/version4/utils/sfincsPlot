#!/usr/bin/env python

# This python script plots the output of a single SFINCS run.

import matplotlib
import matplotlib.pyplot as plt
import h5py
import numpy
import inspect, os
import warnings

print "This is "+ inspect.getfile(inspect.currentframe())

try:
    f = h5py.File('sfincsOutput.h5','r')
except:
    print "Unable to open sfincsOutput.h5"
    raise

matplotlib.rcParams.update({'font.size': 8})

# The expression [()] converts from an h5py dataset to a numpy ndarray:
theta = f['theta'][()]
zeta = f['zeta'][()]
BHat = f['BHat'][()]
DHat = f['DHat'][()]
BHat_sup_theta = f['BHat_sup_theta'][()]
BHat_sup_zeta = f['BHat_sup_zeta'][()]
BHat_sub_psi = f['BHat_sub_psi'][()]
BHat_sub_theta = f['BHat_sub_theta'][()]
BHat_sub_zeta = f['BHat_sub_zeta'][()]
dBHatdtheta = f['dBHatdtheta'][()]
dBHatdzeta = f['dBHatdzeta'][()]
dBHatdpsiHat = f['dBHatdpsiHat'][()]
dBHat_sub_psi_dtheta = f['dBHat_sub_psi_dtheta'][()]
dBHat_sub_psi_dzeta = f['dBHat_sub_psi_dzeta'][()]
dBHat_sub_theta_dzeta = f['dBHat_sub_theta_dzeta'][()]
dBHat_sub_theta_dpsiHat = f['dBHat_sub_theta_dpsiHat'][()]
dBHat_sub_zeta_dtheta = f['dBHat_sub_zeta_dtheta'][()]
dBHat_sub_zeta_dpsiHat = f['dBHat_sub_zeta_dpsiHat'][()]
BDotCurlB = f['BDotCurlB'][()]
iota = f['iota'][()]
FourierAmplitudeVsL = f['FourierAmplitudeVsL'][()]
LegendreAmplitudeVsX = f['LegendreAmplitudeVsX'][()]
x = f['x'][()]

# If I don't explicitly cast Nspecies to an integer, I sometimes get a weird error message:
# "ValueError: The truth value of an array with more than one element is ambiguous."
Nspecies = int(f['Nspecies'][()])
Nzeta = int(f['Nzeta'][()])
Nx = int(f['Nx'][()])
integerToRepresentTrue = int(f['integerToRepresentTrue'][()])
includePhi1 = int(f['includePhi1'][()])
geometryScheme = int(f['geometryScheme'][()])
L_to_save = map(int,f['L_to_save'][()])
Nxi_to_save = int(f['Nxi_to_save'][()])
Zs = f['Zs'][()]

print "Successfully read data from sfincsOutput.h5"

zeta2D,theta2D = numpy.meshgrid(zeta,theta)

NspeciesToPlot = Nspecies
if Nspecies>3:
    NspeciesToPlot = 3


if Nzeta < 2:
    ###############################################3
    # Nzeta=1, so this run is a tokamak.
    ###############################################3

    ###############################################3
    # Plot the input magnetic field
    ###############################################3
    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = 2
    numCols = 4

    linespec = ".-"

    plt.subplot(numRows, numCols, 1)
    plt.plot(theta,BHat.transpose(),linespec)
    plt.xlabel('theta')
    plt.ylabel('BHat')

    plt.subplot(numRows, numCols, 3)
    plt.plot(theta,BHat_sup_theta.transpose(),linespec)
    plt.ylabel('BHat_sup_theta')
    plt.xlabel('theta')

    plt.subplot(numRows, numCols, 4)
    plt.plot(theta,BHat_sup_zeta.transpose(),linespec)
    plt.ylabel('BHat_sup_zeta')
    plt.xlabel('theta')

    plt.subplot(numRows, numCols, 5)
    plt.plot(theta,DHat.transpose(),linespec)
    plt.ylabel('DHat (inverse Jacobian)')
    plt.xlabel('theta')

    plt.subplot(numRows, numCols, 6)
    plt.plot(theta,BHat_sub_psi.transpose(),linespec)
    plt.ylabel('BHat_sub_psi')
    plt.xlabel('theta')

    plt.subplot(numRows, numCols, 7)
    plt.plot(theta,BHat_sub_theta.transpose(),linespec)
    plt.ylabel('BHat_sub_theta')
    plt.xlabel('theta')

    plt.subplot(numRows, numCols, 8)
    plt.plot(theta,BHat_sub_zeta.transpose(),linespec)
    plt.ylabel('BHat_sub_zeta')
    plt.xlabel('theta')

    titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################
    # If sfincs terminated without physics output,
    # stop here.
    ###############################################

    try:
        totalDensity_realSpace = f['totalDensity_realSpace'][()]
    except KeyError:
        print "No physics output detected in .h5 file, so stopping here."
        plt.show()
        exit(0)

    ###############################################
    # Plot the outputs for iteration 1
    ###############################################

    densityNonadiabaticPerturbation_realSpace = f['densityNonadiabaticPerturbation_realSpace'][()]
    NIterations = int(f['NIterations'][()])
    #totalDensity_realSpace = f['totalDensity_realSpace'][()]
    Mach = f['MachUsingFSAThermalSpeed_realSpace'][()]
    totalPressure_realSpace = f['totalPressure_realSpace'][()]
    jHat_realSpace = f['jHat_realSpace'][()]
    if includePhi1 == integerToRepresentTrue:
        Phi1Hat_realSpace = f['Phi1Hat_realSpace'][()]

    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = NspeciesToPlot
    if includePhi1 == integerToRepresentTrue and numRows<2:
        numRows = 2
    numCols = 4

    ispecies=0
    iteration=0
    temp = totalDensity_realSpace[:,:,ispecies,iteration].transpose()

    iteration = 0
    for ispecies in range(0,NspeciesToPlot):

        # Plot density
        plt.subplot(numRows, numCols, ispecies*numCols+1)
        #plt.plot(theta,totalDensity_realSpace[:,:,ispecies,iteration].transpose(),linespec)
        #plt.ylabel('totalDensity_realSpace for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.plot(theta,densityNonadiabaticPerturbation_realSpace[:,:,ispecies,iteration].transpose(),linespec)
        plt.ylabel('densityNonadiabaticPerturbation_realSpace for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('theta')
        if NIterations>1:
            plt.plot(theta,densityNonadiabaticPerturbation_realSpace[:,:,ispecies,NIterations-1].transpose(),'.-r')

        # Plot Mach #
        plt.subplot(numRows, numCols, ispecies*numCols+2)
        plt.plot(theta,Mach[:,:,ispecies,iteration].transpose(),linespec)
        plt.ylabel('Mach # for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('theta')
        if NIterations>1:
            plt.plot(theta,Mach[:,:,ispecies,NIterations-1].transpose(),'.-r')

        # Plot pressure
        plt.subplot(numRows, numCols, ispecies*numCols+3)
        plt.plot(theta,totalPressure_realSpace[:,:,ispecies,iteration].transpose(),linespec)
        plt.ylabel('totalPressure for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('theta')
        if NIterations>1:
            plt.plot(theta,totalPressure_realSpace[:,:,ispecies,NIterations-1].transpose(),'.-r')

    # Plot parallel current
    plt.subplot(numRows, numCols, 4)
    plt.plot(theta,jHat_realSpace[:,:,iteration].transpose(),linespec)
    plt.ylabel('jHat (parallel current)')
    plt.xlabel('theta')
    if NIterations>1:
        plt.plot(theta,jHat_realSpace[:,:,NIterations-1].transpose(),'.-r')

    if includePhi1 == integerToRepresentTrue:
        plt.subplot(numRows, numCols, 8)
        plt.plot(theta,Phi1Hat_realSpace[:,:,iteration].transpose(),linespec)
        plt.ylabel('Phi1Hat')
        plt.xlabel('theta')
        if NIterations>1:
            plt.plot(theta,Phi1Hat_realSpace[:,:,NIterations-1].transpose(),'.-r')

    #plt.subplot(1,1,1)
    #plt.text(0.5,0.9,'Results for first iteration')

    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################
    # Plot various outputs vs x for iteration 1
    ###############################################

    x = f['x'][()]
    FSABFlow_vs_x = f['FSABFlow_vs_x'][()]
    particleFlux_vm_psiHat_vs_x = f['particleFlux_vm_psiHat_vs_x'][()]
    heatFlux_vm_psiHat_vs_x = f['heatFlux_vm_psiHat_vs_x'][()]
    FSABFlow = f['FSABFlow'][()]
    particleFlux_vm_psiHat = f['particleFlux_vm_psiHat'][()]
    heatFlux_vm_psiHat = f['heatFlux_vm_psiHat'][()]

    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = NspeciesToPlot
    numCols = 3

    iteration = 0
    for ispecies in range(0,NspeciesToPlot):

        plt.subplot(numRows, numCols, ispecies*numCols+1)
        plt.plot(x,particleFlux_vm_psiHat_vs_x[:,ispecies,iteration],'.-')
        plt.ylabel('particleFlux_vm_psiHat_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        print "Species ",ispecies+1,"particleFlux_vm_psiHat=",particleFlux_vm_psiHat[ispecies,iteration],", sum(particleFlux_vm_psiHAt_vs_x)=",sum(particleFlux_vm_psiHat_vs_x[:,ispecies,iteration])
        if NIterations>1:
            plt.plot(x,particleFlux_vm_psiHat_vs_x[:,ispecies,NIterations-1],'.-r')

        plt.subplot(numRows, numCols, ispecies*numCols+2)
        plt.plot(x,FSABFlow_vs_x[:,ispecies,iteration],'.-')
        plt.ylabel('FSABFlow_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        print "Species ",ispecies+1,"FSABFlow=",FSABFlow[ispecies,iteration],", sum(FSABFlow_vs_x)=",sum(FSABFlow_vs_x[:,ispecies,iteration])
        if NIterations>1:
            plt.plot(x,FSABFlow_vs_x[:,ispecies,NIterations-1],'.-r')

        plt.subplot(numRows, numCols, ispecies*numCols+3)
        plt.plot(x,heatFlux_vm_psiHat_vs_x[:,ispecies,iteration],'.-')
        plt.ylabel('heatFlux_vm_psiHat_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        print "Species ",ispecies+1,"heatFlux_vm_psiHat=",heatFlux_vm_psiHat[ispecies,iteration],", sum(heatFlux_vm_psiHAt_vs_x)=",sum(heatFlux_vm_psiHat_vs_x[:,ispecies,iteration])
        if NIterations>1:
            plt.plot(x,heatFlux_vm_psiHat_vs_x[:,ispecies,NIterations-1],'.-r')

    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################3
    plt.show()

    ###############################################3
    # End of plotting routines for a tokamak.
    ###############################################3
else:
    ###############################################3
    # Nzeta>1, so this run is a stellarator.
    ###############################################3

    ###############################################3
    # Plot the input magnetic field
    ###############################################3
    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = 2
    numCols = 4

    plt.subplot(numRows, numCols, 1)
    #plt.contourf(zeta,theta,BHat.transpose(),20)
    plt.contourf(zeta2D,theta2D,BHat.transpose(),20)
    if geometryScheme==5:
        plt.title('BHat with an approximate field line\n(Not straight in VMEC coordinates)')
    else:
        plt.title('BHat with a field line')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()
    # Plot a field line:
    if iota>0:
        plt.plot([0,zeta.max()],[0,zeta.max()*iota],'k')
    else:
        plt.plot([0,zeta.max()],[-zeta.max()*iota,0],'k')

    plt.subplot(numRows, numCols, 2)
    plt.contourf(zeta,theta,BHat.transpose(),20)
    #plt.pcolormesh(zeta,theta,BHat.transpose())
    plt.title('BHat. Dots show (theta,zeta) grid.')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()
    for theta0 in theta:
        plt.plot(zeta, [theta0]*zeta.size,'.k')

    plt.subplot(numRows, numCols, 3)
    plt.contourf(zeta,theta,BHat_sup_theta.transpose(),20)
    plt.title('BHat_sup_theta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 4)
    plt.contourf(zeta,theta,BHat_sup_zeta.transpose(),20)
    plt.title('BHat_sup_zeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 5)
    plt.contourf(zeta,theta,DHat.transpose(),20)
    plt.title('DHat (inverse Jacobian)')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 6)
    plt.contourf(zeta,theta,BHat_sub_psi.transpose(),20)
    plt.title('BHat_sub_psi')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 7)
    plt.contourf(zeta,theta,BHat_sub_theta.transpose(),20)
    plt.title('BHat_sub_theta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 8)
    plt.contourf(zeta,theta,BHat_sub_zeta.transpose(),20)
    plt.title('BHat_sub_zeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###################################################
    # Plot other components of the input magnetic field
    ###################################################
    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = 2
    numCols = 3

    plt.subplot(numRows, numCols, 1)
    plt.contourf(zeta,theta,dBHat_sub_psi_dtheta.transpose(),20)
    plt.title('dBHat_sub_psi_dtheta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 2)
    plt.contourf(zeta,theta,dBHat_sub_psi_dzeta.transpose(),20)
    plt.title('dBHat_sub_psi_dzeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 3)
    plt.contourf(zeta,theta,dBHat_sub_theta_dpsiHat.transpose(),20)
    plt.title('dBHat_sub_theta_dpsiHat')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 4)
    plt.contourf(zeta,theta,dBHat_sub_theta_dzeta.transpose(),20)
    plt.title('dBHat_sub_theta_dzeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 5)
    plt.contourf(zeta,theta,dBHat_sub_zeta_dpsiHat.transpose(),20)
    plt.title('dBHat_sub_zeta_dpsiHat')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 6)
    plt.contourf(zeta,theta,dBHat_sub_zeta_dtheta.transpose(),20)
    plt.title('dBHat_sub_zeta_dtheta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###################################################
    # Plot still more components of the input magnetic field
    ###################################################
    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = 2
    numCols = 4

    plt.subplot(numRows, numCols, 1)
    plt.contourf(zeta,theta,dBHatdpsiHat.transpose(),20)
    plt.title('dBHatdpsiHat')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 2)
    plt.contourf(zeta2D,theta2D,dBHatdtheta.transpose(),20)
    plt.title('dBHatdtheta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 3)
    plt.contourf(zeta2D,theta2D,dBHatdzeta.transpose(),20)
    plt.title('dBHatdzeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 4)
    mu0 = 1.25663706143592e-06
    plt.contourf(zeta2D,theta2D,(BHat_sup_theta*(dBHat_sub_psi_dtheta-dBHat_sub_theta_dpsiHat)+BHat_sup_zeta*(dBHat_sub_psi_dzeta-dBHat_sub_zeta_dpsiHat)).transpose()/mu0,20)
    plt.title('dp/dpsi computed from curl(B) cross B')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 5)
    plt.contourf(zeta,theta,(DHat*(dBHat_sub_zeta_dtheta-dBHat_sub_theta_dzeta)).transpose(),20)
    plt.title('curl(B) dot grad psiHat')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 6)
    plt.contourf(zeta,theta,(DHat*(dBHat_sub_psi_dzeta-dBHat_sub_zeta_dpsiHat)).transpose(),20)
    plt.title('curl(B) dot grad theta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 7)
    plt.contourf(zeta,theta,(DHat*(dBHat_sub_theta_dpsiHat-dBHat_sub_psi_dtheta)).transpose(),20)
    plt.title('curl(B) dot grad zeta')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()

    plt.subplot(numRows, numCols, 8)
    plt.contourf(zeta,theta,BDotCurlB.transpose(),20)
    plt.title('BDotCurlB')
    plt.xlabel('zeta')
    plt.ylabel('theta')
    plt.colorbar()


    titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################
    # Plot showing selection of Fourier modes
    ###############################################

    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = 1
    numCols = 2

    predictedAmplitudes = f['predictedAmplitudes'][()]
    NFourier = f['NFourier'][()]
    NPeriods = f['NPeriods'][()]
    xm = f['xm'][()]
    xn = f['xn'][()]
    mmax = f['mmax'][()]
    nmax = f['nmax'][()]

    plt.subplot(numRows, numCols, 1)
    with warnings.catch_warnings(): # Block warning message that results from attempting to evaluate log(0)
        warnings.simplefilter("ignore")
        plt.imshow(numpy.log10(predictedAmplitudes.transpose()),interpolation='nearest',extent=[-nmax,nmax,mmax,0])
    plt.title('log10(predictedAmplitudes)')
    plt.xlabel('n')
    plt.ylabel('m')
    plt.colorbar()

    modesUsed = predictedAmplitudes.transpose()*0
    for imn in range(NFourier):
        modesUsed[xm[imn],xn[imn]/NPeriods+nmax]=1

    plt.subplot(numRows, numCols, 2)
    plt.imshow(modesUsed,interpolation='nearest',extent=[-nmax,nmax,mmax,0])
    plt.title('modes used')
    plt.xlabel('n')
    plt.ylabel('m')

    titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################
    # If sfincs terminated without physics output,
    # stop here.
    ###############################################

    try:
        totalDensity_realSpace = f['totalDensity_realSpace'][()]
    except KeyError:
        print "No physics output detected in .h5 file, so stopping here."
        plt.show()
        exit(0)

    ###############################################
    # Plot showing the actual amplitudes of the Fourier modes
    ###############################################

    mmax_used = numpy.max(numpy.abs(xm))
    nmax_used = numpy.max(numpy.abs(xn))/NPeriods
    iteration = -1  # Only plot the last iteration
    for ispecies in range(Nspecies):
        fig = plt.figure()
        #fig = plt.figure(5+ispecies)
        fig.patch.set_facecolor('white')

        numRows = numpy.ceil(numpy.sqrt(Nxi_to_save*1.0))
        numCols = numpy.ceil(Nxi_to_save*1.0/numRows)

        for ixi in range(Nxi_to_save):
            plt.subplot(numRows, numCols, ixi+1)
            amplitudes = numpy.zeros((mmax_used+1,nmax_used*2+1))
            for imn in range(NFourier):
                amplitudes[xm[imn],xn[imn]/NPeriods+nmax_used]=FourierAmplitudeVsL[imn,ixi,ispecies,iteration]
            with warnings.catch_warnings(): # Block warning message that results from attempting to evaluate log(0) 
                warnings.simplefilter("ignore")
                plt.imshow(numpy.log10(numpy.abs(amplitudes)),interpolation='nearest',extent=[-nmax,nmax,mmax,0])
            plt.title('L={:d}'.format(L_to_save[ixi]))
            plt.xlabel('n')
            plt.ylabel('m')
            plt.colorbar()

        titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
        plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom')
        plt.figtext(0.5,0.99,'log10(Fourier amplitudes) for species {:d} (Z={})'.format(1+ispecies,Zs[ispecies]),horizontalalignment='center',verticalalignment='top')

    ###############################################
    # Plot showing the distribution function amplitude vs L for each x.
    ###############################################

    iteration = -1  # Only plot the last iteration
    numCols=2
    numRows = numpy.ceil(Nx*1.0/numCols)
    for ispecies in range(Nspecies):
        fig = plt.figure()
        #fig = plt.figure(5+ispecies)
        fig.patch.set_facecolor('white')

        for ix in range(Nx):
            plt.subplot(numRows, numCols, ix+1)
            plt.semilogy(LegendreAmplitudeVsX[ix,:,ispecies,iteration],'.-')
            plt.title('x={}'.format(x[ix]))
            plt.xlabel('L')

        titleString = "Plot generated by "+ inspect.getfile(inspect.currentframe()) + "\nRun in "+os.getcwd()
        plt.figtext(0.5,0.01,titleString,horizontalalignment='center',verticalalignment='bottom')
        plt.figtext(0.5,0.99,'Distribution function for species {:d} (Z={})'.format(1+ispecies,Zs[ispecies]),horizontalalignment='center',verticalalignment='top')

    ###############################################
    # Plot the outputs
    ###############################################

    totalDensity_realSpace = f['totalDensity_realSpace'][()]
    NIterations = int(f['NIterations'][()])
    Mach = f['MachUsingFSAThermalSpeed_realSpace'][()]
    totalPressure_realSpace = f['totalPressure_realSpace'][()]
    Zs = f['Zs'][()]
    jHat_realSpace = f['jHat_realSpace'][()]
    if includePhi1 == integerToRepresentTrue:
        Phi1Hat_realSpace = f['Phi1Hat_realSpace'][()]

    if (NIterations==1):
        plotNums = [1]
    else:
        plotNums = [1,2]

    numPlotsBeforeThis = 5+Nspecies
    for plotNum in plotNums:
        fig = plt.figure()
        #fig = plt.figure(plotNum+numPlotsBeforeThis)
        fig.patch.set_facecolor('white')

        numRows = NspeciesToPlot
        if includePhi1 == integerToRepresentTrue and numRows<2:
            numRows = 2
        numCols = 4

        ispecies=0
        if plotNum==1:
            iteration=0
        else:
            iteration = NIterations-1
        print "Plotting iteration ",iteration+1
        temp = totalDensity_realSpace[:,:,ispecies,iteration].transpose()

        for ispecies in range(0,NspeciesToPlot):

            # Plot density
            plt.subplot(numRows, numCols, ispecies*numCols+1)
            plt.contourf(zeta2D,theta2D,totalDensity_realSpace[:,:,ispecies,iteration].transpose(),20)
            plt.colorbar()
            plt.title('totalDensity for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
            plt.xlabel('zeta')
            plt.ylabel('theta')

            # Plot Mach #
            plt.subplot(numRows, numCols, ispecies*numCols+2)
            plt.contourf(zeta,theta,Mach[:,:,ispecies,iteration].transpose(),20)
            plt.title('Mach # for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
            plt.xlabel('zeta')
            plt.ylabel('theta')
            plt.colorbar()

            # Plot pressure
            plt.subplot(numRows, numCols, ispecies*numCols+3)
            plt.contourf(zeta,theta,totalPressure_realSpace[:,:,ispecies,iteration].transpose(),20)
            plt.title('totalPressure for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
            plt.xlabel('zeta')
            plt.ylabel('theta')
            plt.colorbar()

        # Plot parallel current
        plt.subplot(numRows, numCols, 4)
        plt.contourf(zeta,theta,jHat_realSpace[:,:,iteration].transpose(),20)
        plt.title('jHat (parallel current)')
        plt.xlabel('zeta')
        plt.ylabel('theta')
        plt.colorbar()

        if includePhi1 == integerToRepresentTrue:
            plt.subplot(numRows, numCols, 8)
            plt.contourf(zeta,theta,Phi1Hat_realSpace[:,:,iteration].transpose(),20)
            plt.title('Phi1Hat')
            plt.xlabel('zeta')
            plt.ylabel('theta')
            plt.colorbar()

        if includePhi1 == integerToRepresentTrue and numRows >= 3:
            plt.subplot(numRows, numCols, 12)
            data = numpy.zeros(totalDensity_realSpace[:,:,0,iteration].shape)
            for ispecies in range(Nspecies):
                data += totalDensity_realSpace[:,:,ispecies,iteration] * Zs[ispecies]
            plt.contourf(zeta,theta,data.transpose(),20)
            plt.title('Total charge density (should be 0)')
            plt.xlabel('zeta')
            plt.ylabel('theta')
            plt.colorbar()

        #plt.subplot(1,1,1)
        #plt.text(0.5,0.9,'Results for first iteration')

        topString = "Iteration "+str(iteration+1)+". "+titleString
        plt.figtext(0.5,0.99,topString,horizontalalignment='center',verticalalignment='top')

    ###############################################
    # Plot various outputs vs x for iteration 1
    ###############################################

    x = f['x'][()]
    FSABFlow_vs_x = f['FSABFlow_vs_x'][()]
    particleFlux_vm_psiHat_vs_x = f['particleFlux_vm_psiHat_vs_x'][()]
    heatFlux_vm_psiHat_vs_x = f['heatFlux_vm_psiHat_vs_x'][()]
    FSABFlow = f['FSABFlow'][()]
    particleFlux_vm_psiHat = f['particleFlux_vm_psiHat'][()]
    heatFlux_vm_psiHat = f['heatFlux_vm_psiHat'][()]

    fig = plt.figure()
    fig.patch.set_facecolor('white')

    numRows = NspeciesToPlot
    numCols = 3

    iteration = 0
    for ispecies in range(0,NspeciesToPlot):

        plt.subplot(numRows, numCols, ispecies*numCols+1)
        for iteration in range(NIterations):
            plt.plot(x,particleFlux_vm_psiHat_vs_x[:,ispecies,iteration],'.-',label="Iteration "+str(iteration+1))
        plt.ylabel('particleFlux_vm_psiHat_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        if ispecies==0:
            plt.legend(prop={'size':7})
        print "Species ",ispecies+1,"particleFlux_vm_psiHat=",particleFlux_vm_psiHat[ispecies,iteration],", sum(particleFlux_vm_psiHAt_vs_x)=",sum(particleFlux_vm_psiHat_vs_x[:,ispecies,iteration])

        plt.subplot(numRows, numCols, ispecies*numCols+2)
        for iteration in range(NIterations):
            plt.plot(x,FSABFlow_vs_x[:,ispecies,iteration],'.-')
        plt.ylabel('FSABFlow_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        print "Species ",ispecies+1,"FSABFlow=",FSABFlow[ispecies,iteration],", sum(FSABFlow_vs_x)=",sum(FSABFlow_vs_x[:,ispecies,iteration])

        plt.subplot(numRows, numCols, ispecies*numCols+3)
        for iteration in range(NIterations):
            plt.plot(x,heatFlux_vm_psiHat_vs_x[:,ispecies,iteration],'.-')
        plt.ylabel('heatFlux_vm_psiHat_vs_x for species {} (Z={})'.format(ispecies+1,Zs[ispecies]))
        plt.xlabel('x')
        print "Species ",ispecies+1,"heatFlux_vm_psiHat=",heatFlux_vm_psiHat[ispecies,iteration],", sum(heatFlux_vm_psiHAt_vs_x)=",sum(heatFlux_vm_psiHat_vs_x[:,ispecies,iteration])

    plt.figtext(0.5,0.99,titleString,horizontalalignment='center',verticalalignment='top')

    ###############################################3
    plt.show()
